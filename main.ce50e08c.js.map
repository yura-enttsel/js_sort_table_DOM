{"version":3,"sources":["scripts/main.js"],"names":["tableBody","document","querySelector","tableHeadArr","querySelectorAll","tableHeader","firstElementChild","sortTable","index","rows","sort","a","b","valueA","cells","innerText","valueB","toFormat","localeCompare","forEach","row","append","text","result","parseFloat","replace","isNaN","addEventListener","e","findIndex","el","target"],"mappings":";AAAA,aA6BC,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA3BD,IAAMA,EAAYC,SAASC,cAAc,SACnCC,EAAmBF,EAAAA,SAASG,iBAAiB,gBAC7CC,EAAcJ,SAASC,cAAc,SAASI,kBAQpD,SAASC,EAAUC,GACbR,EAAAA,EAAUS,MACXC,KAAK,SAACC,EAAGC,GACFC,IAAAA,EAASF,EAAEG,MAAMN,GAAOO,UACxBC,EAASJ,EAAEE,MAAMN,GAAOO,UAEtB,MAA4B,iBAArBE,EAASJ,GACpBI,EAASJ,GAAQK,cAAcD,EAASD,IACxCC,EAASJ,GAAUI,EAASD,KAEjCG,QAAQ,SAAAC,GAAOpB,OAAAA,EAAUqB,OAAOD,KAGrC,SAASH,EAASK,GACVC,IAAAA,EAASC,WAAWF,EAAKG,QAAQ,QAAS,KAEzCC,OAAAA,MAAMH,GAAUD,EAAOC,EAtBhClB,EAAYsB,iBAAiB,QAAS,SAAAC,GAGpCrB,EAFoBJ,EAAa0B,UAAU,SAAAC,GAAMA,OAAAA,IAAOF,EAAEG","file":"main.ce50e08c.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst tableBody = document.querySelector('tbody');\nconst tableHeadArr = [...document.querySelectorAll('thead tr th')];\nconst tableHeader = document.querySelector('table').firstElementChild;\n\ntableHeader.addEventListener('click', e => {\n  const indexToSort = tableHeadArr.findIndex(el => el === e.target);\n\n  sortTable(indexToSort);\n});\n\nfunction sortTable(index) {\n  [...tableBody.rows]\n    .sort((a, b) => {\n      const valueA = a.cells[index].innerText;\n      const valueB = b.cells[index].innerText;\n\n      return (typeof toFormat(valueA) === 'string')\n        ? toFormat(valueA).localeCompare(toFormat(valueB))\n        : toFormat(valueA) - toFormat(valueB);\n    })\n    .forEach(row => tableBody.append(row));\n}\n\nfunction toFormat(text) {\n  const result = parseFloat(text.replace(/[$,]/g, ''));\n\n  return isNaN(result) ? text : result;\n}\n"]}